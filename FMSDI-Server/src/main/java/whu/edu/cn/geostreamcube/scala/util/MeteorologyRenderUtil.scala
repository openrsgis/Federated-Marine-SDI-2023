package whu.edu.cn.geostreamcube.scala.util

import geotrellis.raster.render.{ColorMap, RGB}

object MeteorologyRenderUtil {

  final val TWO_M_TEMPERATURE_RENDER: ColorMap = ColorMap(
    Map(
      261.15 -> RGB(19, 43, 123),
      265.15 -> RGB(41, 85, 146),
      269.15 -> RGB(45, 111, 200),
      273.15 -> RGB(73, 152, 214),
      277.15 -> RGB(136, 198, 228),
      281.15 -> RGB(175, 219, 222),
      285.15 -> RGB(216, 237, 230),
      289.15 -> RGB(243, 239, 218),
      293.15 -> RGB(206, 242, 188),
      297.15 -> RGB(189, 242, 128),
      301.15 -> RGB(251, 241, 143),
      305.15 -> RGB(254, 230, 175),
      308.15 -> RGB(253, 197, 149),
      310.15 -> RGB(240, 145, 116),
      313.15 -> RGB(245, 79, 25),
      Double.MaxValue -> RGB(224, 0, 19),
    )
  )

  final val MEAN_TEMPERATURE_RENDER: ColorMap = ColorMap(
    Map(299.7 -> RGB(19, 43, 123),
      299.95 -> RGB(41, 85, 146),
      300.2 -> RGB(45, 111, 200),
      300.45 -> RGB(73, 152, 214),
      300.7 -> RGB(136, 198, 228),
      300.95 -> RGB(175, 219, 222),
      301.2 -> RGB(216, 237, 230),
      301.45 -> RGB(243, 239, 218),
      301.7 -> RGB(206, 242, 188),
      301.95 -> RGB(189, 242, 128),
      302.2 -> RGB(251, 241, 143),
      302.45 -> RGB(254, 230, 175),
      302.7 -> RGB(253, 197, 149),
      302.95 -> RGB(240, 145, 116),
      303.6 -> RGB(245, 79, 25),
      Double.MaxValue -> RGB(251, 162, 3),
    )

  )

  final val TOTAL_PRECIPITATION: ColorMap = ColorMap(
    Map(
      0.0 -> RGB(255, 255, 255),
      0.001 -> RGB(203, 244, 202),
      0.002 -> RGB(171, 235, 167),
      0.004 -> RGB(89, 191, 103),
      0.006 -> RGB(117, 189, 255),
      0.008 -> RGB(41, 45, 231),
      0.01 -> RGB(41, 137, 112),
      0.025 -> RGB(237, 45, 251),
      0.05 -> RGB(217, 106, 55),
      0.1 -> RGB(141, 45, 105),
      Double.MaxValue -> RGB(250, 0, 229),
    )
  )


  final val SEA_SURFACE_TEMPERATURE: ColorMap = ColorMap(
    Map(271.15 -> RGB(201, 0, 157),
      275.75 -> RGB(143, 0, 204),
      280.25 -> RGB(80, 100, 224),
      284.85 -> RGB(60, 242, 230),
      289.45 -> RGB(40, 203, 73),
      293.95 -> RGB(96, 206, 31),
      298.55 -> RGB(241, 239, 43),
      303.15 -> RGB(251, 130, 30),
      307.65 -> RGB(250, 1, 23),
      Double.MaxValue -> RGB(198, 0, 16),
    )
  )

  final val SIGNIFICANT_HEIGHT_WAVE: ColorMap = ColorMap(
    Map(0.5 -> RGB(35, 47, 228),
      1.0 -> RGB(120, 155, 229),
      1.5 -> RGB(58, 240, 207),
      2.0 -> RGB(49, 176, 134),
      2.5 -> RGB(62, 237, 36),
      3.0 -> RGB(236, 238, 43),
      3.5 -> RGB(253, 217, 41),
      4.0 -> RGB(251, 170, 34),
      4.5 -> RGB(248, 109, 31),
      5.0 -> RGB(250, 33, 23),
      5.5 -> RGB(250, 29, 60),
      6.0 -> RGB(250, 34, 110),
      6.5 -> RGB(251, 45, 183),
      7.0 -> RGB(178, 50, 228),
      7.5 -> RGB(148, 48, 228),
      8.0 -> RGB(103, 32, 134),
      Double.MaxValue -> RGB(51, 48, 46)
    )
  )


  final val U_COMPONENT_OF_WIND: ColorMap = ColorMap(
    Map(271.15 -> RGB(201, 0, 157),
      275.75 -> RGB(143, 0, 204),
      280.25 -> RGB(80, 100, 224),
      284.85 -> RGB(60, 242, 230),
      289.45 -> RGB(40, 203, 73),
      293.95 -> RGB(96, 206, 31),
      298.55 -> RGB(241, 239, 43),
      303.15 -> RGB(251, 130, 30),
      307.65 -> RGB(250, 1, 23),
      Double.MaxValue -> RGB(198, 0, 16),
    )
  )

  final val V_COMPONENT_OF_WIND: ColorMap = ColorMap(
    Map(271.15 -> RGB(201, 0, 157),
      275.75 -> RGB(143, 0, 204),
      280.25 -> RGB(80, 100, 224),
      284.85 -> RGB(60, 242, 230),
      289.45 -> RGB(40, 203, 73),
      293.95 -> RGB(96, 206, 31),
      298.55 -> RGB(241, 239, 43),
      303.15 -> RGB(251, 130, 30),
      307.65 -> RGB(250, 1, 23),
      Double.MaxValue -> RGB(198, 0, 16),
    )
  )

  final val MEAN_SEA_LEVEL_PRESSURE: ColorMap = ColorMap(
    Map(98000.0 -> RGB(252, 0, 229),
      98400.0 -> RGB(159, 0, 228),
      98800.0 -> RGB(66, 52, 228),
      99200.0 -> RGB(109, 99, 228),
      99600.0 -> RGB(154, 144, 229),
      100000.0 -> RGB(203, 192, 230),
      100400.0 -> RGB(249, 236, 231),
      100800.0 -> RGB(255, 239, 228),
      101200.0 -> RGB(253, 195, 187),
      101600.0 -> RGB(252, 146, 141),
      102000.0 -> RGB(251, 100, 100),
      102400.0 -> RGB(250, 52, 60),
      102800.0 -> RGB(251, 150, 32),
      Double.MaxValue -> RGB(253, 242, 44)
    )
  )

  final val SOIL_TYPE: ColorMap = ColorMap(
    Map(1.0 -> RGB(255, 69, 0),
      2.0 -> RGB(154, 205, 50),
      3.0 -> RGB(138, 43, 226),
      4.0 -> RGB(255, 215, 0),
      5.0 -> RGB(186, 85, 211),
      6.0 -> RGB(255, 165, 0),
      7.0 -> RGB(135, 206, 235),
      Double.MaxValue -> RGB(70, 130, 180)
    )
  )

  final val TOTAL_CLOUD_COVER: ColorMap = ColorMap(
    Map(0.0 -> RGB(91, 80, 151),
      0.1 -> RGB(61, 129, 172),
      0.2 -> RGB(99, 178, 157),
      0.3 -> RGB(154, 205, 153),
      0.4 -> RGB(210, 228, 148),
      0.5 -> RGB(247, 242, 170),
      0.6 -> RGB(254, 231, 157),
      0.7 -> RGB(251, 194, 117),
      0.8 -> RGB(246, 145, 86),
      0.9 -> RGB(231, 90, 70),
      1.0 -> RGB(201, 49, 73),
      Double.MaxValue -> RGB(156, 0, 62)
    )
  )

  final val AIR_DENSITY_OVER_THE_OCEANS: ColorMap = ColorMap(
    Map(1.0 -> RGB(57, 66, 141),
      1.05 -> RGB(71, 85, 150),
      1.1 -> RGB(100, 142, 190),
      1.15 -> RGB(143, 203, 224),
      1.2 -> RGB(201, 222, 223),
      1.25 -> RGB(246, 237, 226),
      1.3 -> RGB(250, 232, 178),
      1.35 -> RGB(248, 207, 129),
      1.4 -> RGB(235, 141, 87),
      1.45 -> RGB(227, 68, 57),
      1.5 -> RGB(212, 14, 22),
      Double.MaxValue -> RGB(185, 18, 21)
    )
  )

  final val HIGH_VEGETATION_COVER: ColorMap = ColorMap(
    Map(0.0 -> RGB(129, 124, 120),
      0.1 -> RGB(221, 0, 20),
      0.2 -> RGB(223, 164, 32),
      0.3 -> RGB(253, 245, 46),
      0.4 -> RGB(174, 245, 41),
      0.5 -> RGB(42, 218, 32),
      0.6 -> RGB(34, 183, 25),
      0.7 -> RGB(21, 131, 15),
      0.8 -> RGB(8, 76, 6),
      0.9 -> RGB(59, 244, 235),
      1.0 -> RGB(50, 194, 235),
      Double.MaxValue -> RGB(45, 165, 234)
    )
  )

  final val NDVI: ColorMap = ColorMap(
    Map(-2000.0 -> RGB(111, 126, 107),
      -1000.0 -> RGB(226, 44, 26),
      0.0 -> RGB(235, 110, 22),
      1000.0 -> RGB(255, 227, 18),
      2000.0 -> RGB(100, 172, 50),
      3000.0 -> RGB(53, 163, 56),
      4000.0 -> RGB(0, 152, 72),
      5000.0 -> RGB(14, 171, 161),
      6000.0 -> RGB(92, 176, 252),
      7000.0 -> RGB(47, 107, 169),
      8000.0 -> RGB(59, 32, 119),
      9000.0 -> RGB(101, 31, 121),
      10000.0 -> RGB(197, 67, 138),
      Double.MaxValue -> RGB(226, 25, 99)
    )
  )


}
